@using Build_a_PC_Sales_Deal_Hunter.Models;
@model SummaryItemModel
@{
    ViewBag.Title = "Home Page";
}

<script type="text/javascript">
    var items = null;
    $(document).ready(function ()
    {
        var submission = '@Convert.ToBoolean(ViewData["submit"])';
        if (submission == "True")
        {
            swal("Success!", "Email Address Submitted!", "success");
            @ViewData["submit"] = "False";
        }

        items = ['CASE', 'CONTROLLER', "COOLER", "CPU", "FAN",
    "GPU", "HDD", "HEADPHONES", "KEYBOARD", "MONITOR",
    "MOUSE", "PSU", "RAM", "SSD", "MOBO", '@Model[0].Query',
    '@Model[1].Query', '@Model[2].Query', '@Model[3].Query', '@Model[4].Query'
        ];

        $('#bar-1').jqbar({ label: '@Model[0].Query', barColor: '#FF681F', value: '@Model[0].Count', orientation: 'v' });
        $('#bar-2').jqbar({ label: '@Model[1].Query', barColor: '#3a89c9', value: '@Model[1].Count', orientation: 'v' });
        $('#bar-3').jqbar({ label: '@Model[2].Query', barColor: '#ea805c', value: '@Model[2].Count', orientation: 'v' });
        $('#bar-4').jqbar({ label: '@Model[3].Query', barColor: '#88bbc8', value: '@Model[3].Count', orientation: 'v' });
        $('#bar-5').jqbar({ label: '@Model[4].Query', barColor: '#939393', value: '@Model[4].Count', orientation: 'v' });

        var CommitTable = $('#CommitTable').DataTable(
        {
            "paging": false,
            "info": false,
            "searching": false
        });
    });

    function ToggleCommitTable()
    {
        if ($('#CommitTable').is(":visible"))
            $("#CommitTable").hide();
        else
            $("#CommitTable").show();
    }

    </script>
    <script src="~/Scripts/Index.js" type="text/javascript"></script>

@using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        <div class="jumbotron" style="background-color:#d9d9d9">
            <h1>Build A PC Sales Email Service</h1>
            <h3>Receive immediate deal alerts</h3>
            <p style="font-size:small">
                Hey all! I've been lurking through this subreddit for about a month and a half so far and it hasn't taken me long to learn that some of the best deals only last for short amounts of time and every second counts (as seen <a href="https://www.reddit.com/r/buildapcsales/comments/3v1mjo/gpu_evga_gtx_970_ftw_25068_first_purchase_promo/cxjk40v">here</a>).
                Having experienced this frustration of missing out on deals first hand, I've decided to create a utility for the people of <a href="https://www.reddit.com/r/buildapcsales/">r/buildapcsales/</a> to send out email notifications of deals as soon as they happen.
                I present you: Build a PC Sales Deal Hunter. Never mind the URL name, it was a joke URL for an Entrepreneurship class last semester.
            </p>
            <p style="font-size:small">
                Along with this utility, I also have uploaded the source code to <a href="https://github.com/reserad/Build-a-PC-Sales-Deal-Hunter">Github</a> for all you code junkies out there. I've tested this a few times by myself and I'm hoping you guys will enjoy it. I very well understand that it may not work 100% of the time because of how every post here has a similar but different title format for each deal post.
                If you guys have any recommendations for the future or if you guys experience unforeseeable errors that I may have missed, feel free to PM me about the specifics!
                <br />
                <i>Note, if there is an error, it is logged automatically for me to see.. So I will aspire to be as timely as possible determining issues.</i>
            </p>
            <p style="font-size:small">
                <b>How does it work?</b>
                <br />
                You enter your email address and add query(s) and click submit. Every minute, the service obtains .json data from the search page under the search criteria of "new" and "past 24 hours". The service then categorizes the data into a dynamic variable and parses through the title and checks through all registered users whether this is something they're looking for or not. If it is within their specified queries, the service then obtains the deal price and checks if it's below to or equal to what the user is willing to pay. If all that pans out, the deal is then checked against data in a database if it has already been sent to this specific user. If not, an email is sent to that user and the URL is logged to prevent any further duplicate emails.
            </p>
            <div style="font-size:small">
                <b>Sample Email:</b>
                <br />
                <img src="~/images/Capture.jpg" style="width:60%; height:60%" />
            </div>
            <button type="button" class="btn btn-default" onclick="ToggleCommitTable()">Toggle Change Log:</button>
            <table id="CommitTable" style="font-size:small; display: none;" class="table table-striped table-bordered" cellpadding="10" border="1">
                <thead style="background-color:#B8D4FF"><tr><th style="width:35%">Commit Title</th><th style="width:45%">Commit Description</th><th style="width:20%">Date</th></tr></thead>
                <tbody>
                    <tr><td>Added a lot of reading material to index page</td><td>Removed excess code from UrlShortService.cs, changed ad type.</td><td>12/17/15 12:08pm</td></tr>
                    <tr><td>More code organization</td><td>Fixed DataTable missing image error, re added Google Adsense banner.</td><td>12/15/15 4:42pm</td></tr>
                    <tr><td>Cleaned up code, made some visual changes</td><td>Need to re run proc for sending emails.</td><td>12/15/15 2:00pm</td></tr>
                    <tr><td>Fixed Gmail SMTP issue, added emails sent stat</td><td></td><td>12/14/15 11:59pm</td></tr>
                    <tr><td>Made code cleaner, put text summary on front page.</td><td>Removed deprecated code, fixed mismatched parameters for logging errors (needed to be &#64;Error).</td><td>12/14/15 4:52pm</td></tr>
                    <tr><td>Performance changes</td><td>Decided to cut down on how many items were going to be iterated through. Instead of 20 posted deals a minute (the whole 1st page of search results), I decided to do only the first 2 since the rest aren't going to be changing after they are posted and emails will already have been sent out at that point. Secondly, fixed issue where my emails sent out weren't configured to show html. Thought I had made that change, guess it was only done on the test class. So emails look less generic now.</td><td>12/14/15 12:27am</td></tr>
                    <tr><td>Implemented Data Layer and Added Summary Queries</td><td></td><td>12/12/15 2:27pm</td></tr>
                    <tr><td>Merge pull request #4 from jcoddaire/master</td><td>Updated to use a data layer.</td><td>12/11/15 11:28pm</td></tr>
                    <tr><td>Began adding top suggested items</td><td>A graph would appear on main page showing the most popular searched queries.</td><td>12/10/15 4:52pm</td></tr>
                    <tr><td>Minor changes</td><td>Made emails look a little less basic.</td><td>12/10/15 1:12pm</td></tr>
                    <tr><td>Fixed emails from not being sent. Issue = Godaddy</td><td>Port had to be changed to 25 to run within a Godaddy environment while locally run works fine.</td><td>12/10/15 12:40am</td></tr>
                    <tr><td>Added ad, added delay so emails would send (I hope)</td><td></td><td>12/09/15 9:06pm</td></tr>
                    <tr><td>Fixed Email Duplication Bug</td><td>Error was actually because of a stored proc not returning the true number of emails found via email and url. Further condensed code.</td><td>12/09/15 12:16am</td></tr>
                    <tr><td>Re-organization of code</td><td>Changed many methods from public to private, added data tables for a more inspiring GUI.</td><td>12/08/15 11:41am</td></tr>
                    <tr><td>Ghetto Unit Test to find elapsed time for method</td><td>Edited matching logic hopefully to produce more results and less duplicates. I'm sorry ztnomercy for sending you 90+ emails :( .</td><td>12/08/15 10:57am</td></tr>
                    <tr><td>Fixed major bug that prevented emails sending</td><td>Also implemented an option to delete specific user queries when an email</td><td>12/07/15 11:47pm</td></tr>
                    <tr><td>Forgot to uncomment some things</td><td>Also forgot to clear the table present in the popup modal for detailed records via email every time the button is clicked to toggle the modal.</td><td>12/07/15 7:27pm</td></tr>
                    <tr><td>Shows information about specific queries</td><td>More descriptive error messages.</td><td>12/07/15 7:16pm</td></tr>
                    <tr><td>Minor Changes</td><td>Setting up foundations for a feature to display queries already defined by email address.</td><td>12/07/15 4:44pm</td></tr>
                    <tr><td>Fixed sync problem with Github</td><td>Added stored procedures, add more data verification on form completion, used jcoddaire's suggestion on an increase of performance.</td><td>12/07/15 11:12am</td></tr>
                    <tr><td>Ready for testing</td><td>Transferred to GoDaddy, added option for users to remove their emails from service, email service now works. Errors are now logged in a separate table.</td><td>12/06/15 4:19pm</td></tr>
                </tbody>
            </table>
            <br/>
        <div class="form-group">
            <input placeholder="Email Address" required type="email" name="email" id="email" />
            <button type="button" id="btnAddPreference" class="btn btn-info">Add Querys <span class="glyphicon glyphicon-plus-sign"></span></button>
            <button type="button" onclick="IndividualTask($('#email').val())" class="btn btn-primary">View Querys <span class="glyphicon glyphicon-edit"></span></button>
            <button disabled="disabled" type="submit" class="btn btn-success">Submit <span class="glyphicon glyphicon-envelope"></span></button>
            <button type="button" data-toggle="modal" data-target=".quit" class="btn btn-warning">Quit Service <span class="glyphicon glyphicon-minus-sign"></span></button>
            <table id="fields"></table>
        </div>
    </div>
    <div class="alert alert-info" role="alert">Here's what others have searched</div>
            <div class="bars">
                <div id="bar-1">
                </div>
                <div id="bar-2">
                </div>
                <div id="bar-3">
                </div>
                <div id="bar-4">
                </div>
                <div id="bar-5">
                </div>
            </div>
}

<div class="modal fade quit" tabindex="-1" role="dialog" aria-labelledby="gridSystemModalLabel">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="gridSystemModalLabel">Quit emailing service?</h4>
            </div>
            <div class="modal-body">
                If your provided email address is found, it will be purged and you will no longer obtain the very latest deals from r/buildapcsales/!
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger" onclick="RemoveEmail($('#email').val())">Remove Email</button>
                <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade showQueries" tabindex="-1" role="dialog" aria-labelledby="gridSystemModalLabel">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="gridSystemModalLabel">Records found via email address</h4>
            </div>
            <div class="modal-body">
                <table class="table table-striped table-bordered" cellpadding="10" border="1" id="dataTable">
                    <thead style="background-color:#B8D4FF">
                        <tr>
                            <th style="vertical-align:middle;">Query</th>
                            <th style="vertical-align:middle;">Price</th>
                            <th style="vertical-align:middle;">Delete</th>
                        </tr>
                    </thead>
                    <tbody id="queriesBody"></tbody>
                </table>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-dismiss="modal">Done</button>
            </div>
        </div>
    </div>
</div>